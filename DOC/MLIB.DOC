----------------------------------------------------------------------------
□ setds - DSの保存と設定

    void near setds(void)

	● DSを保存し、DS = CS に設定します。

	○ デバイスドライバは DS かカーネルを指したままで呼ばれるので、
	   この関数で保存・設定します。

	☆ 保存場所が１つ分しかないので２回連続で呼ばないでください。

----------------------------------------------------------------------------
□ rstds - DSの復帰

    void near rstds(void)

	● setds で保存した DS の値を復帰します。

----------------------------------------------------------------------------
□ gets - １行入力

    int near gets(char far *buf, int max)

	● １行入力を行います。

	← buf  バッファ
	   max  最大入力文字数

	→ 入力文字数(改行コードは含まれない)

	○ max には最後の '\0' の分も含まれます。
	   つまり、普通は max = sizeof(buf) です。

----------------------------------------------------------------------------
□ sprintf

    int near sprintf(char far *buf, char *format, ...)

	● sprintf を行います。

	☆ パラメータとしてポインタを渡す場合は、必ず far ポインタに
	   してください。

----------------------------------------------------------------------------
□ printf

    int near printf(char far *format, ...)

	● printf を行います。

	☆ パラメータとしてポインタを渡す場合は、必ず far ポインタに
	   してください。

	   内部にバッファが 256 バイトしか用意されていないので、
	   これを越えると危険です。

----------------------------------------------------------------------------
□ strlen - 文字列の長さの取得

    int near strlen(char far *s)

	● 文字列の長さを取得します。

	← s  文字列

	→ 文字列の長さ

----------------------------------------------------------------------------
□ strcpy - 文字列の複写

    void near strcpy(char far *dst, char far *src)

	● 文字列を複写します

	← dst  複写先
	   src  複写元

	☆ dst は十分な量確保されていること。

----------------------------------------------------------------------------
□ strchr - 文字検索

    char far * near strchr(char far *s, char c)

	● 文字列 s の中で文字が最初に現れる位置を返します。

----------------------------------------------------------------------------
□ atou - ASCII to Unsigned

    unsigned near atou(char far *s)

	● 数字文字列を unsigned に変換します。

----------------------------------------------------------------------------
□ query - 問い合わせ

    int query(char far *s, int def, char far *color)

	● ユーザーに問い合わせを行います。

	← s      表示する文字列
	   def    デフォルトの答え
	     Q_NONE  デフォルトはない
	     Q_NO    No
	     Q_YES   Yes
	   color  エスケープシーケンス文字列(0 = 色を変えない)

	→ 答え
	     Q_NO   No
	     Q_YES  Yes

----------------------------------------------------------------------------
□ getchar - 標準入力デバイスより１文字入力

    int near getchar(void)

	● １文字入力を行います。

	← -1       入力なし
	   -1 以外  入力文字

----------------------------------------------------------------------------
□ puts - 文字列出力

    void near puts(char far *s)

	● 文字列を出力します。

	○ 最後に改行が追加されます。

----------------------------------------------------------------------------
□ print - 文字列出力

    void near print(char far *s)

	● 文字列を出力します。

	○ 最後に改行が追加されません。

----------------------------------------------------------------------------
□ putchar - 標準出力デバイスへ１文字出力

    void near putchar(char c)

	● １文字出力を行います。

----------------------------------------------------------------------------
□ strcat - 文字列連結

    void near strcat(char far *s, char far *add)

	● 文字列 s の後ろに文字列 add を連結します。

	☆ s は十分な量確保されていること。

----------------------------------------------------------------------------
□ fgets - ファイルより一行入力

    int fgets(char far *buf, int max, int handle)

	● ファイルから１行入力を行います。

	← buf     バッファ
	   max     最大入力文字数
	   handle  ファイルハンドル

	→ 入力文字数

----------------------------------------------------------------------------
□ getc - ファイルより１文字入力

    int getc(int handle)

	● １文字入力を行います。

	← handle   ファイルハンドル

	→ -1       EOF
	   -1 以外  入力文字

----------------------------------------------------------------------------
□ chop - 改行コードの削除

    void chop(char far *s)

	● 文字列の最後にある改行コードを削除します。

	☆ 改行コード以外は削除しません。

----------------------------------------------------------------------------
□ strcmp - 文字列比較

   int strcmp(char far *a, char far *b)

	● 文字列 a と b を比較します。

----------------------------------------------------------------------------
□ memset - メモリ領域を指定された文字でうめる

    void memset(void far *s, int c, unsigned size)

	● s から size バイトのあいだを文字 c で埋めます。

----------------------------------------------------------------------------
□ gets2 - １行入力(エコーバック文字指定つき)

    int gets2(char far *buf, int max, int echoback)

	● エコーバック文字を指定できる gets です。

	← buf       バッファ
	   max       最大入力文字数
	   echoback  エコーバック文字(0 = getsと同じ動作)

	→ 入力文字数

----------------------------------------------------------------------------
□ memcpy - メモリ間コピー

    void memcpy(void far *dst, void far *src, unsigned size)

	● src から dst で size バイトコピーします。

----------------------------------------------------------------------------
□ filesize - ファイルサイズの取得

    long filesize(char far *filename)

	● ファイルサイズを取得します。

----------------------------------------------------------------------------
□ ldiv - long 割り算

    ldiv_t ldiv(long number, long denom)

	● long の割り算を行います。

	☆ コンパイラは long の割り算に内部ライブラリを使おうとするので
	   long の値に '/' や '%' 演算子は使えません。

----------------------------------------------------------------------------
□ atol - ASCII to Long

    long atol(char far *s)

	● 数字文字列を long の数に変換します。

----------------------------------------------------------------------------
□ lmul - long 掛け算

    long lmul(long number, long m)

	● long の掛け算を行います。

	☆ コンパイラは long の掛け算に内部ライブラリを使おうとするので
	   long の値に '*' 演算子は使えません。

----------------------------------------------------------------------------
□ strncmp - 文字列比較(最大文字数指定つき)

    int strncmp(char far *a, char far *b, unsigned n)

	● 文字列 a と文字列 b を最大 n バイト比較します。

----------------------------------------------------------------------------
□ strlwr - 小文字化

    void strlwr(char far *s)

	● 文字列に含まれる英字を全て小文字にします。

----------------------------------------------------------------------------
□ getpid_n - プロセス名からPIDを取得

    unsigned getpid_n(char far *name)

	● プロセス名 name のプロセスのPIDを取得します。

----------------------------------------------------------------------------
□ waitmsg - メッセージ待機

    unsigned waitmsg(unsigned timeout)

	● メッセージが到着するのを待ちます。

	← timeout  タイムアウト時間(秒)

	→ 0        タイムアウト
	   0 以外   到着メッセージ数

----------------------------------------------------------------------------

