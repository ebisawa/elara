----------------------------------------------------------------------------
□ relcpu - プロセス切り替え

    void near relcpu(void)

        ● プロセスを切り替えます。

        ○ 実体はなにもしないシステムコールで、
           副作用のプロセス切り替えのみが起こります。

        ☆ システムコールを発行してもプロセスが切り替わらない場合には
           プロセスを切り替える手段はありません。

----------------------------------------------------------------------------
□ exec - モジュール実行

    int near exec(char far *filename, char far *argv)

        ● モジュールを実行します。

        ← filename  モジュールファイル名
           argv      オプション文字列

        → 0       戻ってくることはない(成功すればプロセスが終了するため)
           0 以外  失敗

        ○ カレントプロセスは終了します。

	☆ プロセスID は子プロセスに引き継がれます。
	   また、子プロセス終了待ちの親も起こしません。

----------------------------------------------------------------------------
□ spawn - モジュール実行

    int near spawn(int mode, char far *filename, char far *argv)

        ● モジュールを実行します。

        ← mode
             P_WAIT    子プロセス終了を待つ
             P_NOWAIT  子プロセス終了を待たない

           filename    モジュールファイル名
           argv        オプション文字列

        → 0       成功
           0 以外  失敗

        ○ カレントプロセスは終了せず、平行動作します。

	☆ P_NOWAIT で実行してもプロセスが切り替わらない状態では
	   子プロセスが動き出す前に戻ってきてしまいます。

----------------------------------------------------------------------------
□ getpid - プロセスID の取得

    unsigned near getpid(void)

        ● プロセスID を取得します。

----------------------------------------------------------------------------
□ getppid - 親プロセスID の取得

    unsigned near getppid(unsigned pid)

        ● 親のプロセスID を取得します。

        ← pid     プロセスID

        → 0       失敗
           0 以外  親のプロセスID

----------------------------------------------------------------------------
□ getname - プロセス名の取得

    char far * near getname(unsigned pid)

        ● プロセス名を取得します。

        ← pid     プロセスID

        → 0       失敗
           0 以外  プロセス名

        ○ プロセス名はモジュールファイル名の拡張子を除いた最大 8 文字です。

----------------------------------------------------------------------------
□ getstat - プロセスステータスの取得

    unsigned near getstat(unsigned pid)

        ● プロセスステータスを取得します。

        ← pid     プロセスID

        → 0       失敗
           0 以外  プロセスステータス

        ○ プロセスステータス

             S_RUN      実行中
             S_WAIT     事象待ち中
             S_SLEEP    一時停止中
             S_DELETED  削除済み

----------------------------------------------------------------------------
□ getprio - プロセス優先度の取得

    unsigned near getprio(unsigned pid)

        ● プロセスの優先度を取得します。

        ← pid     プロセスID

        → 0       失敗
           0 以外  プロセス優先度

        ○ プロセス優先度は値が小さいほど優先的に実行されることを表します。

----------------------------------------------------------------------------
□ getwait1 - 待機中のイベント番号の取得

    unsigned near getwait1(unsigned pid)

        ● 待機中のイベント番号を取得します。

        ← pid     プロセスID

        → 0       プロセスがイベント待ち状態でない
           0 以外  待っているイベント番号

	○ イベント番号

             W_USER    ユーザー用
             W_CHILD   子プロセス終了待ち
             W_MEMORY  メモリ解放待ち
             W_FILE    ファイル使用終了待ち

----------------------------------------------------------------------------
□ getwait2 - 待機中のサブイベント番号の取得

    unsigned near getwait2(unsigned pid)

        ● 待機中のサブイベント番号を取得します。

        ← pid     プロセスID

        → 0       プロセスがイベント待ち状態でない
           0 以外  待っているサブイベント番号

----------------------------------------------------------------------------
□ getstack - 現在のスタックポインタの取得

    void far * near getstack(unsigned pid)

	● 現在のスタックポインタを取得します。

	← pid     プロセスID

	→ 0       失敗
	   0 以外  スタックポインタ

----------------------------------------------------------------------------
□ getmuse - プロセスのメモリ使用量の取得

    long near getmuse(unsigned pid)

	● プロセスのメモリ使用量を取得します。

	← pid     プロセスID

	→ 0       失敗
	   0 以外  メモリ使用量

	○ メモリ使用量は、コード・データ領域、スタック領域と、
	   malloc()で確保した領域の合計サイズが返されます。

	   実際には、コード・データ領域は複数のプロセスで共有されるので
	   単純に加算していくと計算が合わないことになります。

----------------------------------------------------------------------------
□ getargv - オプション文字列の取得

    char far * near getargv(void)

	● オプション文字列を取得します。

	→ 0       オプション文字列が渡されていない
	   0 以外  オプション文字列を指すポインタ

----------------------------------------------------------------------------
□ kill - プロセス削除

    int near kill(unsigned pid)

	● 指定されたプロセスを削除します。

	← pid     プロセスID

	→ 0       成功
	   0 以外  失敗

----------------------------------------------------------------------------
□ exit - プロセス終了

    void near exit(void)

	● カレントプロセスを終了します。

	○ このシステムコールから戻ってくるとこはありません。

----------------------------------------------------------------------------
□ disp - 文字列表示

    void near disp(char far *string)

	● 文字列を表示します。

	← string  表示する文字列

	○ デバイスドライバを経由せず、直接 DOS を呼び出します。

----------------------------------------------------------------------------
□ shutdown - システム停止

    void near shutdown(int retcode)

	● カーネルを終了します。

	← retcode  カーネルのリターンコード

	○ このシステムコールから戻ってくることはありません。

----------------------------------------------------------------------------
□ adddrv - デバイスドライバ登録

    int near adddrv(char far *filename, char far *argv)

	● デバイスドライバを登録します。

	← filename  ファイル名
	   argv      オプション文字列

	→ 0         成功
	   0 以外    失敗

----------------------------------------------------------------------------
□ deldrv - デバイスドライバ削除

    int near deldrv(char far *drvname)

	● デバイスドライバを削除します。

	← drvname  デバイスドライバ名

	→ 0        成功
	   0 以外   失敗

	○ デバイスドライバ名とは、ドライバのファイル名から
	   拡張子を除いたものです。

----------------------------------------------------------------------------
□ adddrv - デバイスの登録

    int near adddev(char far *drvname, char far *devname)

	● デバイスを登録します。

	← drvname  ドライバ名
	   devname  デバイス名

	→ 0        成功
	   0 以外   失敗

----------------------------------------------------------------------------
□ deldrv - デバイスの削除

    int  near deldev(char far *devname)

	● デバイスを削除します。

	← devname  デバイス名

	→ 0        成功
	   0 以外   失敗

----------------------------------------------------------------------------
□ getuid - ユーザーID の取得

    void far * near getuid(unsigned pid)

	● ユーザーID を取得します。

	← pid     プロセスID

	→ 0       成功
	   0 以外  失敗

	○ ユーザーID とは、プロセスごとに設定され、子プロセスに
	   継承される値のことです。ユーザーを識別できる値を設定しておけば
	   どのプロセスがどのユーザーに起動されたのかがわかります。

	   もちろんその他の用途に使うこともできます。

----------------------------------------------------------------------------
□ setuid - ユーザーID の設定

    void near setuid(unsigned pid, void far *uid)

	● ユーザーID を設定します。

	← pid     プロセスID
	   uid     ユーザーID

	○ Elara Kernel にはマルチユーザーサポートが全くないので
	   マルチユーザーなシステムを作るにはこのポインタを使って
	   なんとかするしかない。

----------------------------------------------------------------------------
□ vsprintf

    int near vsprintf(char far *buf, char far *format, void far *ap)

	● vsprintf を実行します。

	○ パラメータとしてポインタを渡す場合は farポインタにすること。

----------------------------------------------------------------------------
□ system - DOSコマンドの実行

    void near system(char far *buf)

	● DOSコマンドを実行します。

	← buf  DOSのシェルに渡す文字列

	○ 空文字列を渡すと DOSのシェルが起動されます。

	☆ DOSコマンド実行中はプロセス切り替えが止まります。

----------------------------------------------------------------------------
□ firstpid - 最初のプロセスID の取得

    unsigned near firstpid(void)

	● プロセスリストの先頭プロセスの PID を取得します。

	→ 先頭プロセスの PID

	○ すべてのプロセス一覧を作成する時などに使えます。

----------------------------------------------------------------------------
□ nextpid - 次のプロセスID の取得

    unsigned near nextpid(unsigned pid)

	● 次のプロセスの PID を取得します。

	← pid     プロセスID

	→ 0       失敗
	   0 以外  次のプロセスの PID

	○ すべてのプロセス一覧を作成する時などに使えます。

----------------------------------------------------------------------------
□ sleep - プロセスを実行中断状態にする

    int near sleep(unsigned pid)

	● プロセスの実行を一時停止します。

	← pid     プロセスID

	→ 0       成功
	   0 以外  失敗

----------------------------------------------------------------------------
□ wakeup - プロセスの実行を再開する

    int near wakeup(unsigned pid)

	● 一時停止中のプロセスの実行を再開します。

	← pid     プロセスID

	→ 0       成功
	   0 以外  失敗

----------------------------------------------------------------------------
□ wait - 事象発生待ち

    void near wait(unsigned event, unsigned param)

	● 指定されたイベントが発生するまで実行を停止します。

	← event  イベント番号
	   param  サブイベント番号

----------------------------------------------------------------------------
□ raise - 事象発生

    void near raise(unsigned event, unsigned param)

	● イベントを発生させます。

	← event  イベント番号
	   param  サブイベント番号

	☆ 本来システムが発生させるべきもの(W_MEMORY, W_FILE 等)も
	   発生させることができますが、その場合は十分注意してください。

----------------------------------------------------------------------------
□ malloc - メモリ確保

    void far * near malloc(unsigned size)

	● メモリを確保します。

	← size    確保するサイズ

	→ 0       失敗
	   0 以外  確保したメモリのアドレス

	○ malloc で確保したメモリで未解放のものは、 プロセス終了時に
	   回収されます。

----------------------------------------------------------------------------
□ free - メモリ解放

    void near free(void far *p)

	● malloc で確保したメモリを解放します。

	← p   解放するメモリブロック

	☆ malloc で確保したメモリしか解放できません。

----------------------------------------------------------------------------
□ xmalloc - メモリ確保(自動解放なし)

    void far * near xmalloc(unsigned size)

	● メモリを確保します。

	← size    確保するサイズ

	→ 0       失敗
	   0 以外  確保したメモリのアドレス

	○ malloc で確保したメモリで未解放のものも自動的に解放される
	   ことはありません。

	☆ デバイスドライバがメモリを確保する場合は xmalloc を
	   使わないといけません。

----------------------------------------------------------------------------
□ xfree - メモリ解放(自動解放なし)

    void near xfree(void far *p)

	● xmalloc で確保したメモリを解放します。

	← p   解放するメモリブロック

	☆ xmalloc で確保したメモリしか解放できません。

----------------------------------------------------------------------------
□ open - ファイルオープン

    int near open(char far *filename, unsigned mode)

	● ファイルをオープンします。

	← filename  ファイル名
	   mode      アクセスモード
	     FA_READ    読み込みのみ
	     FA_WRITE   書き込みのみ
	     FA_RW      読み書き可
	     FA_APEEND  追加書き込み

	→ 0         失敗
	   0 以外    ファイルハンドル

	○ FA_WRITE の場合に同名のファイルが存在すれば消去されます。
	   FA_WRITE, FA_APEEND の場合にファイルが存在しなければ作成されます。

	☆ すでに同名のファイルがオープンされていれば、クローズされるまで
	   ブロックされます。最大オープン可能ファイル数(20)以上のファイルを
	   オープンしようとした時も同様にブロックされます。

	   デッドロックに注意すること。

----------------------------------------------------------------------------
□ close - ファイルクローズ

    void near close(int handle)

	● ファイルをクローズします。

	← handle  ファイルハンドル

	☆ 同時にオープン可能なファイル数には限りがあるので、
	   長期間ファイルを open したままにするのはなるべく避けてください。

----------------------------------------------------------------------------
□ read - ファイル/デバイスリード

    unsigned near read(void far *buf, unsigned size, int handle)

	● ファイル、または標準入力デバイスから読み込みます。

	← buf     読み込み先バッファ
	   size    読み込むサイズ
	   handle  ファイルハンドル

	→ 実際に読み込んだサイズ

	○ handle に 0 を渡すと標準入力デバイスから読み込みを行います。

----------------------------------------------------------------------------
□ write - ファイル/デバイスライト

    unsigned near write(void far *buf, unsigned size, int handle)

	● ファイル、または標準出力デバイスへ書き込みます。

	← buf     書き込み元バッファ
	   size    書き込むサイズ
	   handle  ファイルハンドル

	→ 実際に書き込んだだサイズ

	○ handle に 0 を渡すと標準出力デバイスへ書き込みを行います。

----------------------------------------------------------------------------
□ seek - ファイルシーク

    long near seek(int handle, long pos, unsigned mode)

	● ファイルポインタの移動を行います。

	← handle  ファイルハンドル
	   pos     移動量
	   mode    モード
	     FS_SET  先頭から
	     FS_CUR  現在位置から
	     FS_END  末尾から

	→ 0       失敗
	   0 以外  移動後のファイルポインタ

----------------------------------------------------------------------------
□ ioctl - I/O CONTROL

    int near ioctl(char far *device_name, unsigned command, void far *param)

	● デバイスドライバへメッセージを送信します。

	← device_name  デバイス名
	   command      送るデータ
	   param        送るデータ

	→ 0            成功
	   0 以外       失敗

 	○ メッセージを受信したドライバがどのような動作をするかは
           ドライバに依存します。

----------------------------------------------------------------------------
□ getstdio - 標準入出力デバイスの取得

    int near getstdio(unsigned pid, char far *in, char far *out)

	● 標準入出力デバイスを取得します。

	← pid     プロセスID
	   in      標準入力デバイス名バッファ(最低 9バイト用意すること)
	   out     標準出力デバイス名バッファ(最低 9バイト用意すること)

	→ 0       成功
	   0 以外  失敗

----------------------------------------------------------------------------
□ setstdio - 標準入出力デバイスの設定

    int near setstdio(unsigned pid, char far *in, char far *out)

	● 標準入出力デバイスを設定します。

	← pid     プロセスID
	   in      標準入力デバイス
	   out     標準出力デバイス

	→ 0       成功
	   0 以外  失敗

	☆ 失敗が帰ってきた場合でも、入力か出力かどちらか片方だけ
	   設定に成功している場合があります。

----------------------------------------------------------------------------
□ mkdir - ディレクトリ作成

    int mkdir(char far *path)

	● ディレクトリを作成します。

	← path    作成するディレクトリ名

	→ 0       成功
	   0 以外  失敗

----------------------------------------------------------------------------
□ rmdir - ディレクトリ削除

    int rmdir(char far *path)

	● ディレクトリを削除します。

	← path    削除するディレクトリ名

	→ 0       成功
	   0 以外  失敗

----------------------------------------------------------------------------
□ time - 現在時刻の取得

    long time(void)

	● 現在時刻を取得します

	→ 0       失敗
	   0 以外  現在時刻

	○ 現在時刻は UTC 1970/01/01 00:00:00 からの経過秒数で返されます。

	☆ 環境変数 TZ を適当に設定しておく必要があります。

----------------------------------------------------------------------------
□ localtime - 現在時刻を time_struct に変換

    void localtime(time_struct far *p, long t)

	● time が返す現在時刻を time_struct に変換します。

	← p   time_struct ポインタ
	   t   time が返した現在時刻

	○ time_struct

	   typedef struct time_struct {
	       int year;		/* 年から 1900 を引いたもの */
	       int month;		/* 月: 1-12 */
	       int day;			/* 日: 1-31 */
	       int hour;		/* 時: 0-23 */
	       int min;			/* 分: 1-59 */
	       int sec;			/* 秒: 1-59 */
	       int week;		/* 曜日: 0=日曜日,,,6=土曜日 */
	    } time_struct;

----------------------------------------------------------------------------
□ getpflag - プロセスフラグの取得

    unsigned getpflag(unsigned pid)

	● プロセスフラグを取得します

	← pid  プロセスID

	→ プロセスフラグ

	○ プロセスフラグ
	     P_DONTKILL  プロセス削除, sleep の禁止

----------------------------------------------------------------------------
□ setpflag - プロセスフラグの設定

    int setpflag(unsigned pid, unsigned flag)

	● プロセスフラグを設定します。

	← pid     プロセスID
	   flag    プロセスフラグ

	→ 0       成功
	   0 以外  失敗

----------------------------------------------------------------------------
□ fileno - DOSファイルハンドルの取得

    int fileno(int handle)

	● DOSのファイルハンドルを取得します。

	← handle  Elara ファイルハンドル

	→ DOS ファイルハンドル

----------------------------------------------------------------------------
□ sendmsg - メッセージ送信

    int sendmsg(unsigned to, long command, char far *buffer)

	● メッセージを送信します。

	← to       送信先プロセスID
	   command  送信データ
	   buffer   送信データ

	→ 0        成功
	   0 以外   失敗

	○ buffer が指すメモリ領域は受信側が解放しなくてはなりません。

	☆ 受信側プロセスがメッセージを受信する前に死亡した場合は、
	   buffer が指すメモリ領域が、malloc か xmalloc で確保してある
	   場合に限って自動解放されます。

----------------------------------------------------------------------------
□ recvmsg - メッセージ受信

    int recvmsg(unsigned far *from, long far *command, char far *far *buffer)

	● メッセージを受信します。

	← from     送信元プロセスID
	   command  受信データ
	   buffer   受信データ

	→ 0        成功
	   0 以外   失敗

	☆ buffer が指すメモリは xmalloc で確保するべきでしょう。
	   malloc で確保すると、メッセージ受信前に送信側プロセスが死亡した
	   場合に面倒なことになります。

----------------------------------------------------------------------------
□ checkmsg - メッセージ受信数の取得

    unsigned checkmsg(void)

	● 受信しているメッセージの数を取得します。

	→ 受信しているメッセージ数

----------------------------------------------------------------------------
□ remove - ファイル削除

    int remove(char far *filename)

	● ファイルを削除します。

	← filebane  削除するファイル名

	→ 0         成功
	   0 以外    失敗

----------------------------------------------------------------------------

